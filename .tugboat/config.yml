services:
    # What to call the service hosting the site.
    php:
        # Use PHP 8.1 with Apache to serve the WordPress site; this syntax pulls in the latest version of PHP 8.1
        image: tugboatqa/php:8.1-apache

        # Set this as the default service. This does a few things
        #   1. Clones the git repository into the service container
        #   2. Exposes port 80 to the Tugboat HTTP proxy
        #   3. Routes requests to the preview URL to this service
        default: true

        # Wait until the mysql service is done building
        depends: mysql

        # Tugboat's visual regression testing configuration; URLs to be tested.
        urls:
            - /
            - /sample-page/
            - /tugboat-engines-typically-produce-680-to-3400-hp/

        # Visual regression testing configuration; success threshold.
        visualdiff:
            threshold: 90

        # A set of commands to run while building this service
        commands:
            # Commands that set up the basic preview infrastructure
            init:
                # Set some helpful aliases for the cli and add the composer bin to the PATH.
                - echo "alias ll='ls -la'" >> /root/.bashrc
                - echo "export PATH=$PATH:${TUGBOAT_ROOT}/vendor/bin" >> /root/.bashrc

                # Install prerequisite packages
                - apt-get update
                - apt-get install -y rsync libzip-dev

                # Turn on URL rewriting.
                - a2enmod auth_basic expires headers rewrite

                # Install imagick
                - apt-get install -y libmagickwand-dev
                - pecl install imagick-beta -y
                - docker-php-ext-enable imagick

                # Install the PHP extensions
                - docker-php-ext-install mysqli exif zip

                # Install WordPress with composer.
                # Note: Our composer.json file includes wp-cli.
                - composer install --optimize-autoloader
                # Set up the wp-cli instance installed with composer to be used globally.
                - ln -snf "${TUGBOAT_ROOT}/vendor/bin/wp" /usr/local/bin

                ##
                # Alternatively: install WP-CLI without composer.
                #- curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                #- chmod +x wp-cli.phar
                #- mv wp-cli.phar /usr/local/bin/wp

                # Symlink this repo's docroot folder as Apache's docroot path.
                # Note: WordPress lives in a subdirectory in this example, 'docroot'.
                - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"

                # Place wp-config.php and .htaccess files we want to use for Tugboat.
                - cp ${TUGBOAT_ROOT}/.tugboat/wp-config.tugboat.php ${DOCROOT}/wp-config.local.php
                - cp ${TUGBOAT_ROOT}/.tugboat/.htaccess ${DOCROOT}/.htaccess


            # Phase 2 (update): Import files, database, or any other assets that your
            # website needs to run.
            # When you refresh a Tugboat Preview, the process starts here, skipping `init`.
            update:
                ##################################
                # Import WordPress files (uploads).
                ##################################

                ##
                # Import WordPress files example 1:
                # The backup file is in the repository and already on Tugboat.
                #
                - tar -C /tmp -zxf uploads.tar.gz
                - rsync -avz --delete /tmp/uploads/ "${TUGBOAT_ROOT}/docroot/wp-content/uploads/"

                ##
                # Import WordPress files example 2:
                # The backup file is in a remote location and needs to be downloaded.
                #
                #- curl -O https://github.com/TugboatDemo/wordpress/raw/main/uploads.tar.gz
                #- tar -C /tmp -zxf uploads.tar.gz
                #- rsync -avz --delete /tmp/uploads/ "${TUGBOAT_ROOT}/docroot/wp-content/uploads/"

                ##
                # Import WordPress files example 3:
                # Sync files directly from production using rsync and SSH details similar to our wp cli alias.
                #
                # Note: Using this approach will require adding a Private SSH key as an environment variable in Tugboat.
                #       In this example, that environment variable is named "MY_PRODUCTION_SSH_KEY"
                #
                #- echo "${MY_PRODUCTION_SSH_KEY}" > ~/.ssh/production_ssh_key
                #- chmod 600 ~/.ssh/production_ssh_key
                #
                # Perform the rsync to place WordPress uploads into place.
                #- rsync \
                #  --archive \
                #  --verbose \
                #  # Change SSH Port here if required.
                #  -e "ssh -p 22 -o ConnectTimeout=120" \
                #  # Modify this line to exclude some folders.
                #  # https://linuxize.com/post/how-to-exclude-files-and-directories-with-rsync/#exclude-multiple-files-or-directories
                #  --exclude={'*.zip','*.gz', '*.tgz'} \
                #  # Production SSH connection and path to WordPress files.
                #  example@example.com:/var/www/html/docroot/wp-content/uploads/ \
                #  # Where to place the files locally.
                #  "${DOCROOT}/wp-content/uploads"

                # After placing the files, fix file ownership and harden permissions.
                - chgrp -R www-data "${DOCROOT}/wp-content/uploads"
                - find "${DOCROOT}/wp-content/uploads" -type d -exec chmod 2775 {} \;
                - find "${DOCROOT}/wp-content/uploads" -type f -exec chmod 0664 {} \;

                ##################################
                # (Optional) Import WordPress database with the wp-cli.
                ##################################
                # If we preferred to use the wp-cli to import the database, we would do it here.
                # Note: This also requires a Private SSH key has been placed on the Tugboat instance.
                #       See the "Import files" example that uses rsync over SSH.

                ##
                # Import WordPress database example 1:
                # Using wp-cli and the alias @production, found in our wp-cli.yml file.
                #
                #- wp --allow-root @production db export - > prod.sql
                #- wp --allow-root db import prod.sql && rm prod.sql

                ##
                # Import WordPress database example 2:
                # Using wp-cli without an alias.
                #
                #- wp --allow-root --ssh=example@www.example.com:22/var/www/html/docroot/wp  db export - > prod.sql
                #- wp --allow-root db import prod.sql && rm prod.sql

                ##
                # (Optional) After database import, replace the site's domain throughout the database.
                # Whether you need this step depends on whether WordPress is saving its domain to the database.
                #
                - wp search-replace 'www.example.com' "${TUGBOAT_SERVICE_URL_HOST}" --skip-columns=guid

                # Cleanup
                - apt-get clean
                - rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

            build: []

            clone: []

    # What to call the service hosting MySQL. This name also acts as the
    # hostname to access the service by from the php service.
    mysql:
        image: tugboatqa/mysql:5-debian
        checkout: true
        commands:
            update:
                ##
                # Import WordPress Database example 1:
                # The backup file is in the repository and already on Tugboat.
                #
                - zcat database.sql.gz | mysql tugboat

                ##
                # Import WordPress files example 2:
                # The backup file is in a remote location and needs to be downloaded.
                #
                #- curl -O https://github.com/TugboatDemo/wordpress/raw/main/database.sql.gz
                #- zcat database.sql.gz | mysql tugboat
                #- rm database.sql.gz
