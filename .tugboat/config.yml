services:
    # What to call the service hosting the site.
    php:
        # Use PHP 8.1 with Apache to serve the WordPress site; this syntax pulls in the latest version of PHP 8.1
        image: tugboatqa/php:8.1-apache

        # Set this as the default service. This does a few things
        #   1. Clones the git repository into the service container
        #   2. Exposes port 80 to the Tugboat HTTP proxy
        #   3. Routes requests to the preview URL to this service
        default: true

        # Wait until the mysql service is done building
        depends: mysql

        # Tugboat's visual regression testing configuration.
        urls:
            - /
            - /sample-page/

        visualdiff:
            threshold: 90

        # A set of commands to run while building this service
        commands:
            # Commands that set up the basic preview infrastructure
            init:
                # Set some helpful aliases for the cli and add the composer bin to the PATH.
                - echo "alias ll='ls -la'" >> /root/.bashrc
                - echo "export PATH=$PATH:${TUGBOAT_ROOT}/vendor/bin" >> /root/.bashrc

                # Install prerequisite packages
                - apt-get update
                - apt-get install -y rsync libzip-dev

                # Turn on URL rewriting.
                - a2enmod auth_basic expires headers rewrite

                # Install imagick
                - apt-get install -y libmagickwand-dev
                - pecl install imagick-beta -y
                - docker-php-ext-enable imagick

                # Install the PHP extensions
                - docker-php-ext-install mysqli exif zip

                # Install WordPress.
                - composer install --optimize-autoloader

                # OPTION 2: WordPress Core lives in a subdirectory (in this example, 'docroot').
                - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"

                # Set the wp-config.php and .htaccess files with the one you defined for Tugboat.
                - cp ${TUGBOAT_ROOT}/.tugboat/wp-config.tugboat.php ${DOCROOT}/wp-config.local.php
                - cp ${TUGBOAT_ROOT}/.tugboat/.htaccess ${DOCROOT}/.htaccess


            # Phase 2 (update): Import files, database, or any other assets that your
            # website needs to run.
            # When you refresh a Tugboat Preview, the process starts here, skipping `init`.
            update:
                ################################################
                # Import WordPress database and files (uploads).
                #
                # This example shows creating a fresh installation.
                # Below are more examples for importing database and files remotely.
                - |
                    wp --allow-root core install \
                    --url="https://${TUGBOAT_SERVICE_URL_HOST}" \
                    --title="Tugboat Demo" \
                    --admin_user="tugboatadmin" \
                    --admin_password="tugboatdemo" \
                    --admin_email="tugboat@example.com" \
                    --skip-email
                - wp --allow-root theme activate kadence
                - wp --allow-root option set permalink_structure /%postname%/
                - wp --allow-root cache flush

                ##
                # Example: Import production's database into Tugboat (using wp-cli alias @production).
                #
                #- wp --allow-root @production  db export - > prod.sql
                #- wp --allow-root db import prod.sql && rm prod.sql
                #- wp search-replace 'www.example.com' "${TUGBOAT_SERVICE_URL_HOST}" --skip-columns=guid

                ##
                # Example: Pull files from production (using rsync and details similar to our wp cli alias).
                #
                #- rsync \
                #  --archive \
                #  --verbose \
                #  # Change SSH Port here if required.
                #  -e "ssh -p 22 -o ConnectTimeout=120" \
                #  # Modify this line to exclude some folders: https://linuxize.com/post/how-to-exclude-files-and-directories-with-rsync/#exclude-multiple-files-or-directories
                #  --exclude={'*.zip','*.gz', '*.tgz'} \
                #  # SSH connection and path details.
                #  example@example.com:/var/www/html/docroot/wp-content/uploads/ \
                #  # Where to place the files locally.
                #  "${DOCROOT}/wp-content/uploads"

                # Fix file ownership and harden permissions.
                - chgrp -R www-data "${DOCROOT}/wp-content/uploads"
                - find "${DOCROOT}/wp-content/uploads" -type d -exec chmod 2775 {} \;
                - find "${DOCROOT}/wp-content/uploads" -type f -exec chmod 0664 {} \;

                # Cleanup
                - apt-get clean
                - rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

            # If this preview was built from a base preview, then the base preview's URLs will be set in the database,
            # so we want to rewrite the base preview's URL to this preview's.  However, if this preview does NOT have a
            # base preview, then the original URL from the database export will need to be rewritten.
            build: []

            clone: []

    # What to call the service hosting MySQL. This name also acts as the
    # hostname to access the service by from the php service.
    mysql:
        image: tugboatqa/mysql:5-debian
        checkout: true
        commands:
            update: []
